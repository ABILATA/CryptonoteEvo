cmake_minimum_required(VERSION 3.8.0)
project(cryptonoteevo)
set(CMAKE_CXX_STANDARD 14)
option(USE_INSTRUMENTATION "Activates using code instrumentation" OFF)
option(THREAD_SANITIZER "Uses exclusively thread sanitizer" OFF)
if(WIN32)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
    add_definitions(-D_SCL_SECURE_NO_WARNINGS=1 -D_CRT_SECURE_NO_WARNINGS=1 -D_WIN32_WINNT=0x0501)
else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -maes -g -O2 -Wall -Wextra -Wno-strict-aliasing -Werror=return-type -Wno-unused-parameter -Wno-unused-function")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -maes -g -O2 -Wall -Wextra -Wno-strict-aliasing -Werror=return-type -Wno-unused-parameter -Wno-unused-function")
    message(STATUS "Using instrumentation: " ${USE_INSTRUMENTATION})
    message(STATUS "Using thread sanitizer: " ${THREAD_SANITIZER})
    if(USE_INSTRUMENTATION)
        if(THREAD_SANITIZER)
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=thread")
            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fsanitize=thread")
        else()
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-omit-frame-pointer -fsanitize=address,undefined")
            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fno-omit-frame-pointer -fsanitize=address,undefined")
        endif()
    endif()
endif()
set(SRC_LMDB ../lmdb/libraries/liblmdb/mdb.c ../lmdb/libraries/liblmdb/midl.c)
file(GLOB SRC_CRYPTO src/crypto/*.cpp src/crypto/*.c src/crypto/*.h src/crypto/*.hpp)
file(GLOB SRC_COMMON src/common/*.cpp src/common/*.hpp)
file(GLOB SRC_SERIALIZATION src/Serialization/*.cpp src/Serialization/*.hpp)
file(GLOB SRC_SERIA src/seria/*.cpp src/seria/*.hpp)
file(GLOB SRC_LOGGING src/logging/*.cpp src/logging/*.hpp)
file(GLOB SRC_P2P src/p2p/*.cpp src/p2p/*.hpp)
file(GLOB SRC_CORE src/Core/*.cpp src/Core/*.hpp src/Core/*.h)
file(GLOB SRC_HTTP src/http/*.cpp src/http/*.hpp)
file(GLOB SRC_PLATFORM src/platform/*.cpp src/platform/*.hpp)
if(WIN32)
    set_property(SOURCE ${SRC_CRYPTO} PROPERTY COMPILE_FLAGS -Ot)
    set_property(SOURCE ${SRC_LMDB} PROPERTY COMPILE_FLAGS "-Ot -w")
    set_property(SOURCE ${SRC_COMMON} PROPERTY COMPILE_FLAGS -Ot)
    set_property(SOURCE ${SRC_SERIALIZATION} PROPERTY COMPILE_FLAGS -Ot)
    set_property(SOURCE ${SRC_SERIA} PROPERTY COMPILE_FLAGS -Ot)
else()
    set_property(SOURCE ${SRC_CRYPTO} PROPERTY COMPILE_FLAGS -O3)
    set_property(SOURCE ${SRC_LMDB} PROPERTY COMPILE_FLAGS "-O3 -w")
    set_property(SOURCE ${SRC_COMMON} PROPERTY COMPILE_FLAGS -O3)
    set_property(SOURCE ${SRC_SERIALIZATION} PROPERTY COMPILE_FLAGS -O3)
    set_property(SOURCE ${SRC_SERIA} PROPERTY COMPILE_FLAGS -O3)
endif()
include_directories(src)
include_directories(../lmdb/libraries/liblmdb)
set(SOURCE_FILES
    ${SRC_LMDB}
    ${SRC_COMMON}
    ${SRC_HTTP}
    ${SRC_CORE}
    ${SRC_SERIALIZATION}
    ${SRC_SERIA}
    ${SRC_LOGGING}
    ${SRC_PLATFORM}
    ${SRC_P2P}
    src/CryptoNote.hpp
    src/CryptoNoteConfig.hpp
    src/rpc_api.hpp
    src/version.hpp
)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/bin")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/libs")
if(WIN32)
    include_directories(SYSTEM $ENV{BOOST_INCLUDEDIR})
    link_directories(SYSTEM $ENV{BOOST_LIBRARYDIR}) # must be before add_executable, add_library
endif()
add_library(cryptonote-crypto ${SRC_CRYPTO})
add_library(cryptonote-core ${SOURCE_FILES})
target_link_libraries(cryptonote-core cryptonote-crypto)
add_executable(walletd src/main_walletd.cpp)
add_executable(cryptonoted src/main_cryptonoted.cpp)
add_executable(tests src/main_tests.cpp tests/crypto/test_crypto.cpp tests/hash/test_hash.cpp tests/json/test_json.cpp)
set(Boost_USE_STATIC_LIBS ON)
add_definitions(-DBOOST_BIND_NO_PLACEHOLDERS=1 -DBOOST_CONFIG_SUPPRESS_OUTDATED_MESSAGE=1) # boost::_1 conflicts with std::_1
target_link_libraries(walletd cryptonote-crypto cryptonote-core)
target_link_libraries(cryptonoted cryptonote-crypto cryptonote-core)
target_link_libraries(tests cryptonote-crypto cryptonote-core)
if(WIN32)
else()
    set(Boost_USE_MULTITHREADED OFF) # all boost libraries are multithreaded since some version
    find_package(Boost 1.56 REQUIRED COMPONENTS system)
    include_directories(SYSTEM ${Boost_INCLUDE_DIRS})
    set(Boost_LIBRARIES "${Boost_LIBRARIES}")
    if(APPLE)
        set(CMAKE_OSX_DEPLOYMENT_TARGET "10.11")
        target_link_libraries(walletd "-framework Foundation" "-framework IOKit")
        target_link_libraries(cryptonoted "-framework Foundation" "-framework IOKit")
    endif()
    target_link_libraries(walletd ${Boost_LIBRARIES} pthread)
    target_link_libraries(cryptonoted ${Boost_LIBRARIES} pthread)
    target_link_libraries(tests ${Boost_LIBRARIES} pthread)
endif()
